import cv2
import numpy as np
A = cv2.imread('D:/360Downloads/hou4.jpg')
B = cv2.imread('D:/360Downloads/hou5.jpg')
B=cv2.resize(B,(1600,1600))
A=cv2.resize(A,(1600,1600))
print(A.shape)
print(B.shape)

def cv_show(name,img):
    cv2.imshow(name,img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
G=A.copy()
gpA=[G]
for i in np.arange(6):#将A图片进行高斯金字塔处理，共6级
    G=cv2.pyrDown(G)
    gpA.append(G)

G=B.copy()
gpB=[G]
for i in np.arange(6):#将B图片进行高斯金字塔处理，共6级
    G=cv2.pyrDown(G)
    gpB.append(G)
    
lpA=[gpA[5]]
for i in np.arange(5,0,-1):  #将A进行拉普拉斯金字塔处理，总共5级处理
    GE=cv2.pyrUp(gpA[i])
#     print(GE.shape)
#     print(gpA[i-1].shape)
    L=cv2.subtract(gpA[i-1],GE)
    lpA.append(L)
    
lpB=[gpB[5]]
for i in np.arange(5,0,-1):  #将B进行拉普拉斯金字塔处理，总共5级处理
    GE=cv2.pyrUp(gpB[i])
    L=cv2.subtract(gpB[i-1],GE)
    lpB.append(L)
    
import matplotlib.pyplot as plt
LS=[]
for la,lb in zip(lpA,lpB):
    rows,cols,dpt=la.shape
    ls=np.hstack((la[:,0:cols//2],lb[:,cols//2:]))#将两个图像的矩阵的左半部分和右半部分拼接到一起
    LS.append(ls)
ls_=LS[0]#这里LS[0]为高斯金字塔的最小图片
for i in np.arange(1,6):   #第一次循环的图像为高斯金字塔的最小图片，依次通过拉普拉斯金字塔恢复到大图像
    ls_=cv2.pyrUp(ls_)
    ls_=cv2.add(ls_,LS[i])#采用金字塔拼接方法的图像
#cv_show('',ls_)
real=np.hstack((A[:,:cols//2],B[:,cols//2:]))
plt.subplot(121),plt.imshow(ls_)
plt.subplot(122),plt.imshow(real)
plt.show()    
